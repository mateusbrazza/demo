
import java.util.Map;
import java.util.Set;

public class PermissionCatalog {

    // ------------------- Fase 2 -------------------
    public static final Set<String> FASE2_OBRIGATORIAS = Set.of("RESOURCES_READ");

    public static final Set<String> FASE2_PERMISSOES = Set.of(
        "CAPITALIZATION_TITLE_EVENTS_READ",
        "CAPITALIZATION_TITLE_PLANINFO_READ",
        "CAPITALIZATION_TITLE_READ",
        "CAPITALIZATION_TITLE_SETTLEMENTS_READ",
        "CUSTOMERS_BUSINESS_ADDITIONALINFO_READ",
        "CUSTOMERS_BUSINESS_IDENTIFICATIONS_READ",
        "CUSTOMERS_BUSINESS_QUALIFICATION_READ",
        "CUSTOMERS_PERSONAL_ADDITIONALINFO_READ",
        "CUSTOMERS_PERSONAL_IDENTIFICATIONS_READ",
        "CUSTOMERS_PERSONAL_QUALIFICATION_READ",
        "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_ACCEPTANCE_AND_BRANCHES_ABROAD_READ",
        "DAMAGES_AND_PEOPLE_AUTO_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_AUTO_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_AUTO_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_AUTO_READ",
        "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_FINANCIAL_RISKS_READ",
        "DAMAGES_AND_PEOPLE_HOUSING_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_HOUSING_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_HOUSING_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_HOUSING_READ",
        "DAMAGES_AND_PEOPLE_PATRIMONIAL_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_PATRIMONIAL_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_PATRIMONIAL_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_PATRIMONIAL_READ",
        "DAMAGES_AND_PEOPLE_PERSON_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_PERSON_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_PERSON_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_PERSON_READ",
        "DAMAGES_AND_PEOPLE_RESPONSIBILITY_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_RESPONSIBILITY_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_RESPONSIBILITY_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_RESPONSIBILITY_READ",
        "DAMAGES_AND_PEOPLE_RURAL_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_RURAL_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_RURAL_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_RURAL_READ",
        "DAMAGES_AND_PEOPLE_TRANSPORT_CLAIM_READ",
        "DAMAGES_AND_PEOPLE_TRANSPORT_POLICYINFO_READ",
        "DAMAGES_AND_PEOPLE_TRANSPORT_PREMIUM_READ",
        "DAMAGES_AND_PEOPLE_TRANSPORT_READ",
        "FINANCIAL_ASSISTANCE_CONTRACTINFO_READ",
        "FINANCIAL_ASSISTANCE_MOVEMENTS_READ",
        "FINANCIAL_ASSISTANCE_READ",
        "LIFE_PENSION_CLAIM",
        "LIFE_PENSION_CONTRACTINFO_READ",
        "LIFE_PENSION_MOVEMENTS_READ",
        "LIFE_PENSION_PORTABILITIES_READ",
        "LIFE_PENSION_READ",
        "LIFE_PENSION_WITHDRAWALS_READ",
        "PENSION_PLAN_CLAIM",
        "PENSION_PLAN_CONTRACTINFO_READ",
        "PENSION_PLAN_MOVEMENTS_READ",
        "PENSION_PLAN_PORTABILITIES_READ",
        "PENSION_PLAN_READ",
        "PENSION_PLAN_WITHDRAWALS_READ",
        "RESOURCES_READ"
    );

    // ------------------- Fase 3 -------------------
    public static final Map<String, Set<String>> FASE3_REQUIRED_BY_GROUP = Map.ofEntries(
        Map.entry("CLAIM_NOTIFICATION_REQUEST_DAMAGE", Set.of("CLAIM_NOTIFICATION_REQUEST_DAMAGE_CREATE")),
        Map.entry("CLAIM_NOTIFICATION_REQUEST_PERSON", Set.of("CLAIM_NOTIFICATION_REQUEST_PERSON_CREATE")),
        Map.entry("ENDORSEMENT_REQUEST", Set.of("ENDORSEMENT_REQUEST_CREATE")),
        Map.entry("QUOTE_AUTO", Set.of("QUOTE_AUTO_READ", "QUOTE_AUTO_CREATE", "QUOTE_AUTO_UPDATE")),
        Map.entry("QUOTE_AUTO_LEAD", Set.of("QUOTE_AUTO_LEAD_CREATE", "QUOTE_AUTO_LEAD_UPDATE")),
        Map.entry("QUOTE_PATRIMONIAL_LEAD", Set.of("QUOTE_PATRIMONIAL_LEAD_CREATE", "QUOTE_PATRIMONIAL_LEAD_UPDATE")),
        Map.entry("QUOTE_PATRIMONIAL_HOME", Set.of("QUOTE_PATRIMONIAL_HOME_READ", "QUOTE_PATRIMONIAL_HOME_CREATE", "QUOTE_PATRIMONIAL_HOME_UPDATE")),
        Map.entry("QUOTE_PATRIMONIAL_CONDOMINIUM", Set.of("QUOTE_PATRIMONIAL_CONDOMINIUM_READ", "QUOTE_PATRIMONIAL_CONDOMINIUM_CREATE", "QUOTE_PATRIMONIAL_CONDOMINIUM_UPDATE")),
        Map.entry("QUOTE_PATRIMONIAL_BUSINESS", Set.of("QUOTE_PATRIMONIAL_BUSINESS_READ", "QUOTE_PATRIMONIAL_BUSINESS_CREATE", "QUOTE_PATRIMONIAL_BUSINESS_UPDATE")),
        Map.entry("QUOTE_PATRIMONIAL_DIVERSE_RISKS", Set.of("QUOTE_PATRIMONIAL_DIVERSE_RISKS_READ", "QUOTE_PATRIMONIAL_DIVERSE_RISKS_CREATE", "QUOTE_PATRIMONIAL_DIVERSE_RISKS_UPDATE")),
        Map.entry("QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD", Set.of("QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD_LEAD_CREATE", "QUOTE_ACCEPTANCE_AND_BRANCHES_ABROAD_LEAD_UPDATE")),
        Map.entry("QUOTE_FINANCIAL_RISK_LEAD", Set.of("QUOTE_FINANCIAL_RISK_LEAD_CREATE", "QUOTE_FINANCIAL_RISK_LEAD_UPDATE")),
        Map.entry("QUOTE_HOUSING_LEAD", Set.of("QUOTE_HOUSING_LEAD_CREATE", "QUOTE_HOUSING_LEAD_UPDATE")),
        Map.entry("QUOTE_RESPONSIBILITY_LEAD", Set.of("QUOTE_RESPONSIBILITY_LEAD_CREATE", "QUOTE_RESPONSIBILITY_LEAD_UPDATE")),
        Map.entry("QUOTE_RURAL_LEAD", Set.of("QUOTE_RURAL_LEAD_CREATE", "QUOTE_RURAL_LEAD_UPDATE")),
        Map.entry("QUOTE_TRANSPORT_LEAD", Set.of("QUOTE_TRANSPORT_LEAD_CREATE", "QUOTE_TRANSPORT_LEAD_UPDATE")),
        Map.entry("QUOTE_PERSON_LEAD", Set.of("QUOTE_PERSON_LEAD_CREATE", "QUOTE_PERSON_LEAD_UPDATE")),
        Map.entry("QUOTE_PERSON_LIFE", Set.of("QUOTE_PERSON_LIFE_READ", "QUOTE_PERSON_LIFE_CREATE", "QUOTE_PERSON_LIFE_UPDATE")),
        Map.entry("QUOTE_PERSON_TRAVEL", Set.of("QUOTE_PERSON_TRAVEL_READ", "QUOTE_PERSON_TRAVEL_CREATE", "QUOTE_PERSON_TRAVEL_UPDATE")),
        Map.entry("QUOTE_CAPITALIZATION_TITLE", Set.of("QUOTE_CAPITALIZATION_TITLE_READ", "QUOTE_CAPITALIZATION_TITLE_CREATE", "QUOTE_CAPITALIZATION_TITLE_UPDATE")),
        Map.entry("QUOTE_CAPITALIZATION_TITLE_LEAD", Set.of("QUOTE_CAPITALIZATION_TITLE_LEAD_CREATE", "QUOTE_CAPITALIZATION_TITLE_LEAD_UPDATE")),
        Map.entry("QUOTE_CAPITALIZATION_TITLE_RAFFLE", Set.of("QUOTE_CAPITALIZATION_TITLE_RAFFLE_CREATE")),
        Map.entry("CONTRACT_LIFE_PENSION", Set.of("CONTRACT_LIFE_PENSION_CREATE", "CONTRACT_LIFE_PENSION_UPDATE", "CONTRACT_LIFE_PENSION_READ")),
        Map.entry("CONTRACT_LIFE_PENSION_LEAD", Set.of("CONTRACT_LIFE_PENSION_LEAD_CREATE", "CONTRACT_LIFE_PENSION_LEAD_UPDATE")),
        Map.entry("CONTRACT_LIFE_PENSION_LEAD_PORTABILITY", Set.of("CONTRACT_LIFE_PENSION_LEAD_PORTABILITY_CREATE", "CONTRACT_LIFE_PENSION_LEAD_PORTABILITY_UPDATE")),
        Map.entry("CONTRACT_PENSION_PLAN_LEAD", Set.of("CONTRACT_PENSION_PLAN_LEAD_CREATE", "CONTRACT_PENSION_PLAN_LEAD_UPDATE")),
        Map.entry("CONTRACT_PENSION_PLAN_LEAD_PORTABILITY", Set.of("CONTRACT_PENSION_PLAN_LEAD_PORTABILITY_CREATE", "CONTRACT_PENSION_PLAN_LEAD_PORTABILITY_UPDATE")),
        Map.entry("PENSION_WITHDRAWAL", Set.of("PENSION_WITHDRAWAL_CREATE")),
        Map.entry("PENSION_WITHDRAWAL_LEAD", Set.of("PENSION_WITHDRAWAL_LEAD_CREATE")),
        Map.entry("CAPITALIZATION_TITLE_WITHDRAWAL", Set.of("CAPITALIZATION_TITLE_WITHDRAWAL_CREATE")),
        Map.entry("PERSON_WITHDRAWAL", Set.of("PERSON_WITHDRAWAL_CREATE"))
    );

    // ------------------- Validações de Fase 2 -------------------
    public static boolean hasMissingFase2Obligatory(Set<String> permissions) {
        // Regra 1: RESOURCES_READ obrigatório
        return !permissions.containsAll(FASE2_OBRIGATORIAS);
    }

    public static boolean hasOnlyResourcesRead(Set<String> permissions) {
        // Regra 2: Não pode ter só RESOURCES_READ
        return permissions.size() == 1 && permissions.contains("RESOURCES_READ");
    }

    public static boolean isOnlyFase2(Set<String> permissions) {
        return permissions.stream().allMatch(FASE2_PERMISSOES::contains);
    }

    // ------------------- Validações de Fase 3 -------------------
    public static boolean isFase3Permission(String permission) {
        return FASE3_REQUIRED_BY_GROUP.values().stream()
                .anyMatch(set -> set.contains(permission));
    }

    public static boolean isFase3GroupValid(Set<String> permissions) {
        // Regra implícita: agrupamentos da Fase 3 devem estar completos
        return FASE3_REQUIRED_BY_GROUP.values().stream().noneMatch(group ->
            permissions.stream().anyMatch(group::contains) &&
            !permissions.containsAll(group)
        );
    }

    // ------------------- Mista / Erro -------------------
    public static boolean hasFase2AndFase3(Set<String> permissions) {
        // Regra 3: Não pode misturar Fase 2 com Fase 3
        return permissions.stream().anyMatch(FASE2_PERMISSOES::contains)
            && permissions.stream().anyMatch(PermissionCatalog::isFase3Permission);
    }
}
